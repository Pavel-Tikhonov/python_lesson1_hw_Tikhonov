# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


class MyException(Exception):
    def __init__(self, txt):
        self.txt = txt


def my_exam(some_str):
    if some_str.isdigit():
        return True
    else:
        try:
            float(some_str)
            return True
        except ValueError:
            return False


my_list = []
while True:
    new_str = input('Введите очередное что-нибудь. Для окончания формирования списка введите "stop":\n')
    if new_str == 'stop':
        print(f'Цикл завершается. Вот что у нас получилось:\n{my_list}')
        break
    else:
        try:
            my_exam(new_str)
            if not my_exam(new_str):
                raise MyException('Ошибка. Вы должны были ввести число.')
        except MyException as e:
            print(e)
        else:
            my_list.append(new_str)
            print(f'Ваше значение {new_str} успешно прошло проверку и было доабвлено в список.')
